// Generated by CoffeeScript 1.4.0
(function() {

  (function(jasmine) {
    var JasmineArguments, JasmineArgumentsBuilder, JasmineArgumentsMatcher;
    JasmineArguments = function() {
      return new JasmineArgumentsBuilder();
    };
    JasmineArgumentsMatcher = function(matcher, message) {
      this.jasmineMatches = function(actual) {
        return matcher(actual);
      };
      this.jasmineToString = function() {
        return message;
      };
      return this;
    };
    JasmineArgumentsBuilder = function() {
      var builder, finalMessage, matchers;
      matchers = new Array();
      finalMessage = '';
      builder = this;
      this.jasmineMatches = function(actual) {
        var currentResult, matcher, result, _i, _len;
        result = matchers.length > 0;
        finalMessage = '';
        for (_i = 0, _len = matchers.length; _i < _len; _i++) {
          matcher = matchers[_i];
          currentResult = matcher.jasmineMatches(actual);
          result = result && currentResult;
          if (finalMessage.length > 0 && !currentResult) {
            finalMessage += ' AND ';
          }
          finalMessage += matcher.jasmineToString();
          if (!result) {
            break;
          }
        }
        return result;
      };
      this.jasmineToString = function() {
        return finalMessage;
      };
      this.addMatcher = function(matcher) {
        if (matcher.jasmineMatches !== jasmine.undefined) {
          matchers.push(matcher);
        }
        return builder;
      };
      this.is = function(expected) {
        var matcher, _ref;
        matcher = new JasmineArgumentsMatcher(function(actual) {
          return actual === expected;
        }, (_ref = expected === jasmine.undefined) != null ? _ref : {
          '<Undefined>': expected.toString()
        });
        matchers.push(matcher);
        return builder;
      };
      this.isTruthy = function() {
        return builder.addMatcher(new JasmineArgumentsMatcher(function(actual) {
          return !!actual;
        }, "<Truthy argument>"));
      };
      this.isFalsy = function() {
        return builder.addMatcher(new JasmineArgumentsMatcher(function(actual) {
          return !actual;
        }, "<Falsy argument>"));
      };
      this.getBuilder = function(obj) {
        if (obj === window) {
          return new JasmineArgumentsBuilder();
        } else {
          return obj;
        }
      };
      if (this === window) {
        return new JasmineArgumentsBuilder;
      }
      return this;
    };
    window.JasmineArgumentsBuilder = JasmineArgumentsBuilder;
    window.JasmineArgumentsMatcher = JasmineArgumentsMatcher;
    return jasmine.Arg = JasmineArguments;
  })(jasmine);

}).call(this);
