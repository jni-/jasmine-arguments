// Generated by CoffeeScript 1.4.0
(function() {

  describe('jasmine-arguments-matchers', function() {
    describe('startsWith', function() {
      var matcher;
      matcher = void 0;
      beforeEach(function() {
        return matcher = jasmine.Arg().startsWith;
      });
      it('should return true if search string is empty', function() {
        return expectMatcher(matcher, "", "abcde").toBeTruthy();
      });
      it('should return false if search string is undefined', function() {
        return expectMatcher(matcher, jasmine.undefined, "abcde").toBeFalsy();
      });
      it('should return true because abcde starts with a (startsWith one caracter)', function() {
        return expectMatcher(matcher, "a", "abcde").toBeTruthy();
      });
      it('should return true because abcde starts with abc (startsWith many caracter', function() {
        return expectMatcher(matcher, 'abc', 'abcde').toBeTruthy();
      });
      it('should return false because abcde does not contain xyz', function() {
        return expectMatcher(matcher, 'xyz', 'abcde').toBeFalsy();
      });
      it('should return false because abcde contains cde, but does not start with it', function() {
        return expectMatcher(matcher, 'cde', 'abcde').toBeFalsy();
      });
      it('should return true when both stacked matchers are true', function() {
        return expect(jasmine.Arg().startsWith('abc').startsWith('abc').jasmineMatches('abcde')).toBeTruthy();
      });
      return it('should return false when one of the stacked matchers is false', function() {
        return expect(jasmine.Arg().startsWith('abc').startsWith('cde').jasmineMatches('abcde')).toBeFalsy();
      });
    });
    return describe('contains', function() {
      var matcher;
      matcher = jasmine.undefined;
      beforeEach(function() {
        return matcher = jasmine.Arg().contains;
      });
      it('should return false if search string is undefined', function() {
        return expectMatcher(matcher, jasmine.undefined, 'abcde').toBeFalsy();
      });
      it('should return true if both strings are empty', function() {
        return expectMatcher(matcher, '', '').toBeTruthy();
      });
      it('should return true because abc is the beginning of abcde', function() {
        return expectMatcher(matcher, 'abc', 'abcde').toBeTruthy();
      });
      it('should return true because bcd is contained in abcde', function() {
        return expectMatcher(matcher, 'bcd', 'abcde').toBeTruthy();
      });
      it('should return false because bcz is not contained in abcde', function() {
        return expectMatcher(matcher, 'bcz', 'abcde').toBeFalsy();
      });
      it('should return true because both abc and bcd are contained in abcde', function() {
        return expect(jasmine.Arg().contains('abc').contains('bcd').jasmineMatches('abcde')).toBeTruthy();
      });
      return it('should return false because abc is contained in abcde, but not def', function() {
        return expect(jasmine.Arg().contains('abc').contains('def').jasmineMatches('abcde')).toBeFalsy();
      });
    });
  });

}).call(this);
